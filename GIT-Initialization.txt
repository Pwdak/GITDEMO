INITIALIZE A REMOTE GIT ON MY LOCAL MACHINE

You're correct! Entering your GitHub username and password every time you interact with 
your remote repository can be cumbersome. To avoid this, you can set up SSH authentication, 
which allows you to securely connect to GitHub without repeatedly entering your credentials.

Here's how to set up SSH authentication:

1. **Check for Existing SSH Keys:**
   First, check if you already have SSH keys on your local machine:
   ```
   ls -al ~/.ssh
   ```
   Look for files named `id_rsa` and `id_rsa.pub` (these are the default names for SSH keys).

2. **Generate SSH Key (if needed):**
   If you don't have SSH keys, generate them using the following command:
   ```
   ssh-keygen -t rsa -b 4096 -C "your.email@example.com"
   ```
   Replace `"your.email@example.com"` with your email address. Press "Enter" to generate the key. 
   You can leave the passphrase empty for easier automation, but adding a passphrase adds an extra layer of security.

3. **Add SSH Key to SSH Agent:**
   Start the SSH agent in the background and add your private key to it:
   ```
   eval "$(ssh-agent -s)"
   ssh-add ~/.ssh/id_rsa
   ```

4. **Add Public Key to GitHub:**
   Copy your public key to your clipboard:
   ```
   pbcopy < ~/.ssh/id_rsa.pub
   ```
   - Log in to your GitHub account.
   - Go to "Settings" > "SSH and GPG keys".
   - Click "New SSH key", give it a title, and paste your public key into the "Key" field.
   - Click "Add SSH key".

5. **Test Connection:**
   To ensure your SSH key is set up correctly, run:
   ```
   ssh -T git@github.com
   ```
   You should receive a message indicating successful authentication.

6. **Update Remote URL in Git:**
   Update your remote URL in your local Git repository to use the SSH URL:
   ```
   git remote set-url origin git@github.com:username/repo.git
   ```
   Replace `username` with your GitHub username and `repo` with your repository's name.

With SSH authentication set up, you won't need to enter your username and password every time you interact 
with your remote repository. Git will use your SSH key for authentication, making the process more seamless and secure.